//~OPTIONS
{
  // Basic inheritance template
  // Default: undefined
  // extends:"<super_template.tmpl>",

  // Automatic template update mode when the argument changes.
  // Acceptable values:
  //   true|"all" - The update is performed on any change
  //   "external" - The update is performed only if the external template was the initiator of the change.
  //   false      - The template is not being updated
  // This option can be overridden by the fcfAutoUpdate template argument.
  // Default: false
  autoUpdate: false,

  // If true, the rendering is performed on the client side.
  // Acceptable values:
  //   true|"all"   - Rendering is done on the client, when done on the browser side
  //   "update"     - The first render is done on the server side and the update is on the client side
  //   "update_np"  - The first render is done on the server side and the update is on the client side.
  //                  Parameters of the programmable type are not recalculated.
  //   false        - Rendering is always done on the server side
  // This option can be overridden by the fcfClientRendering template argument, but only if the option is true.
  // Default: false
  clientRendering: false,

  // Additional JS & CSS files to connect (JS files are also connected on the server side)
  // Default: []
  include: ["moving-containers.css"],

  // Plug-in additional JS & CSS files on the client side
  // Default: []
  clientInclude: [],

  // If the parameter is false, the template is not wrapped in a container,
  // a wrapper is not created for it, and its arguments are not available on the client.
  // Default: true
  wrapper: true,

  // DOM elements merge flag.
  // If true, then existing items are not replaced when updated, but updated.
  // Default: false
  merge: false,

  // Saving the initial values of children template arguments.
  // This option can be overridden by the fcfInitialStorageOfChildren template argument.
  // Default: false
  initialStorageOfChildren: false,

  // The template is displayed when the template is locked or false,
  // then the lock is performed only by the transparent container.
  // If the option is true, then @controls:lock is used.
  // This option can be overridden by the fcfLockTemplate template argument.
  // Default: true
  lockTemplate: true
}

//~ARGUMENTS
{
  _strings:  fcf.argProg(),
  _file:     undefined,
  _modify:   false,
}

//~TEMPLATE
<div class="moving-containers-view">
  <div class="moving-containers-view-info">
    <div>
      Rebound counter: <span name="rebound_counter">0</span>
    </div>
    <div>
      Click counter: <span name="click_counter">0</span>
    </div>
  </div>
  <img src="/files/background.jpg" class="moving-containers-view-img"></img>
  %{{
    for(let i = 0; i < args._strings.length; ++i) {
  }}%
    <p>
      @{{
        render.template(
          "+view-item",
          {
            string:          fcf.argRef(`_strings[${i}]`),
            fcfEventClick:   "parent.onClickString(event)",
            fcfEventRebound: "parent.onReboundString(event)"
          })}}@
    </p>
  %{{
    }
  }}%
</div>

<fieldset>
<legend>Editor</legend>

@{{
  render.template("@controls:tabs", {
    tab: fcf.argUrl("tab"),
    items: fcf.argVal({
      strings: {
        title: "Strings",
        data: fcf.argTmpl("+strings", {strings: fcf.argRef("_strings")})
      },
      settings: {
        title: "Settings",
        data: fcf.argTmpl("+settings", {file: fcf.argRef("_file")})
      }
    })
  });
}}@

<p>
@{{ render.template("@controls:button", {title: fcf.t("Save"), enable: fcf.argRef("_modify"), fcfEventClick: "parent.onSave()"}); }}@
@{{ render.template("@controls:button", {title: fcf.t("Cancel"), enable: fcf.argRef("_modify"), fcfEventClick: "parent.onCancel()"}); }}@
</p>

</fieldset>
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//~ SUB TEMPLATE view-item
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//~OPTIONS view-item
{
  autoUpdate:      true,
  clientRendering: true,
}

//~ARGUMENTS view-item
{
  fcfClassInner: "moving-containers-view-item",
  string:        fcf.argVal("", {undefinedValue: ""}),
}

//~TEMPLATE view-item
@{{args.string}}@

//~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//~ SUB TEMPLATE strings
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//~ARGUMENTS strings
{
  strings: fcf.argVal([], {undefinedValue: []}),
}

//~TEMPLATE strings
%{{
  for(let i = 0; i < args.strings.length; ++i) {
}}%
  <p>
    <table width="100%"><tr>
      <td width="100%">
        @{{ render.template("@controls:text-edit", {value: fcf.argRef(`strings[${i}]`), width: "100%"}); }}@
      </td>
      <td>
        @{{ render.template("@controls:button", {title: fcf.t("Remove"), fcfEventClick: `parent.getParent().getParent().onRemoveString(${i})`}); }}@
      </td>
    </tr></table>
  </p>
%{{
  }
}}%
@{{ render.template("@controls:button", {title: fcf.t("Add record"), fcfEventClick: "parent.getParent().getParent().onAddString()"}); }}@


//~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//~ SUB TEMPLATE settings
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//~OPTIONS settings
{
  merge: true
}

//~TEMPLATE settings
JPG background file:
<p>
<input type="file" fcfEventChange="parent.getParent().onFile()"></input>
</p>
